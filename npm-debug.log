0 info it worked if it ends with ok
1 verbose cli [ 'c:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'c:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@2.10.1
3 info using node@v0.12.4
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'c:\\Users\\Darren (Play)\\Documents\\Workspace\\signalsjs',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\Darren (Play)\AppData\Roaming\npm-cache\signalsjs\1.0.0\package.tgz not in flight; packing
9 verbose tar pack [ 'C:\\Users\\Darren (Play)\\AppData\\Roaming\\npm-cache\\signalsjs\\1.0.0\\package.tgz',
9 verbose tar pack   'c:\\Users\\Darren (Play)\\Documents\\Workspace\\signalsjs' ]
10 verbose tarball C:\Users\Darren (Play)\AppData\Roaming\npm-cache\signalsjs\1.0.0\package.tgz
11 verbose folder c:\Users\Darren (Play)\Documents\Workspace\signalsjs
12 info prepublish signalsjs@1.0.0
13 verbose addLocalTarball adding from inside cache C:\Users\Darren (Play)\AppData\Roaming\npm-cache\signalsjs\1.0.0\package.tgz
14 silly cache afterAdd signalsjs@1.0.0
15 verbose afterAdd C:\Users\Darren (Play)\AppData\Roaming\npm-cache\signalsjs\1.0.0\package\package.json not in flight; writing
16 verbose afterAdd C:\Users\Darren (Play)\AppData\Roaming\npm-cache\signalsjs\1.0.0\package\package.json written
17 silly publish { name: 'signalsjs',
17 silly publish   version: '1.0.0',
17 silly publish   description: 'Signal library for JavaScript and TypeScript',
17 silly publish   main: 'index.js',
17 silly publish   typescript: { definition: 'signals.d.ts' },
17 silly publish   scripts:
17 silly publish    { test: 'istanbul cover node_modules/tape/bin/tape -- **/*.spec.js',
17 silly publish      compileweb: 'rimraf dist/* && browserify index.js --debug --standalone signals | exorcist dist/signals.js.map > dist/signals.js && npm run minifyweb',
17 silly publish      minifyweb: 'uglifyjs --compress --mangle --comments --in-source-map dist/signals.js.map --source-map dist/signals.min.js.map --source-map-url signals.min.js.map -o dist/signals.min.js -- dist/signals.js' },
17 silly publish   keywords: [ 'signal', 'slot', 'event', 'signals', 'slots', 'events' ],
17 silly publish   author: { name: 'Darren Schnare', email: 'schnare.d@gmail.com' },
17 silly publish   license: 'MIT',
17 silly publish   devDependencies:
17 silly publish    { browserify: '^12.0.1',
17 silly publish      'codeclimate-test-reporter': '^0.1.1',
17 silly publish      exorcist: '^0.4.0',
17 silly publish      istanbul: '^0.4.0',
17 silly publish      rimraf: '^2.4.3',
17 silly publish      tape: '^4.2.2',
17 silly publish      'uglify-js': '^2.5.0' },
17 silly publish   readme: '# Signalsjs\r\n\r\n---\r\n[![Build Status](https://travis-ci.org/dschnare/signalsjs.svg?branch=master)](https://travis-ci.org/dschnare/signalsjs)\r\n[![Code Climate](https://codeclimate.com/github/dschnare/signalsjs/badges/gpa.svg)](https://codeclimate.com/github/dschnare/signalsjs)\r\n[![Test Coverage](https://codeclimate.com/github/dschnare/signalsjs/badges/coverage.svg)](https://codeclimate.com/github/dschnare/signalsjs/coverage)\r\n#[![npm version](https://badge.fury.io/js/signalsjs.svg)](http://badge.fury.io/js/signalsjs)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](http://doge.mit-license.org)\r\n\r\n\r\nSignalsjs is a light weight signal library. Signals are a replacement for typical\r\nevent-based architectures. The benefit is that objects create signals as part of their API.\r\n\r\n\t// Let\'s use a UI widget or component as an example, one that can be dragged and dropped.\r\n\r\n\tvar widget = {\r\n\t\t// Notify connected handlers that we are ready to be interacted with.\r\n\t\t// NOTE: The string we pass is the name of the signal. This name is only\r\n\t\t// used when a signal throws an error.\r\n\t\tinitialized: signals.signal(\'widget.initialized\'),\r\n\r\n\t\t// Notify connected handlers that we have been dropped.\r\n\t\tdropped: signals.signal(\'widget.dropped\'),\r\n\r\n\t\t// Notify connected handlers that we are disposed.\r\n\t\tdisposed: signals.signal(\'widget.disposed\'),\r\n\r\n\t\t// Other properties ...\r\n\r\n\t\tdoThings: function () {\r\n\t\t\t// no op\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t// Somewhere in code we connect to the widget\'s signals we\'re interested in.\r\n\r\n\twidget.initialized(function () {\r\n\t\t// Do things with the widget after it\'s ready.\r\n\t\twidget.doThings();\r\n\r\n\t\twidget.dropped(function () {\r\n\t\t\t// Do something after the widget has been dropped.\r\n\t\t});\r\n\r\n\t\twidget.disposed(function () {\r\n\t\t\t// disconnectAll() will disconnect all connected handlers from a signal.\r\n\t\t\twidget.initialized.disconnectAll();\r\n\t\t\twidget.dropped.disconnectAll();\r\n\r\n\t\t\t// We\'re "in" a "disposed" signal emission so calling disconnectAll() should\r\n\t\t\t// be problem because it will remove all connect handlers without giving them\r\n\t\t\t// a chance to respond to the signal. However, signals are smart. If disconnectAll()\r\n\t\t\t// is called during a signal\'s emission then it will wait for the connected handlers\r\n\t\t\t// to be called before disconnecting them.\r\n\t\t\twidget.disposed.disconnectAll();\r\n\t\t});\r\n\t});\r\n\r\n\r\n\t// The widget emits a signal by calling a signal\'s emit() method.\r\n\t// Let\'s create an init() method for our widget that initializes our widget\r\n\t// and then emits some signals. When calling emit() you can pass any number of\r\n\t// arguments and they will be passed to the connected handlers.\r\n\r\n\twidget.init = function (domEl) {\r\n\t\tdomEl.addEventListener(\'drop\', function (event) {\r\n\t\t\t// Pass along the drop target perhaps.\r\n\t\t\twidget.dropped.emit(event.target);\r\n\t\t}, false);\r\n\r\n\t\t// Maybe do some asynchronous initialization...\r\n\r\n\t\twidget.initialized.emit();\r\n\t};\r\n\r\n\r\n\r\n# Connections\r\n\r\nEach time you connect to a signal a connection object is returned that has a `disconnect()` method.\r\nWhen this method is called the connection will be disconnected from the signal and the handler will\r\nno longer be called when the signal emits. This method can be called after the connection has been\r\ndisconnected without any side effects.\r\n\r\n\tvar dropped_c = widget.dropped(myHandler);\r\n\tdropped_c.disconnect();\r\n\r\n\t// This won\'t call our handler.\r\n\twidget.dropped.emit();\r\n\r\n\r\n\r\n\r\n# Prioritized handlers and cancelling\r\n\r\nWhen connecting a handler to a signal you can specify a few options that affect how\r\nit\'s called and its priority relative to other connected handlers.\r\n\r\nUsing our widget as an example, let\'s look at how we might connect to its signals using these options.\r\n\r\n\t// Pass a `this` object so that our handler will be called in this context.\r\n\twidget.initialized(myHandler, theThisObj);\r\n\r\n\t// Pass a priority so that our handler is placed before lower priority handlers.\r\n\t// The default priority is 1000 if not specified.\r\n\twidget.initialized(myHandler, 2000);\r\n\r\n\t// Provide both options in one go.\r\n\twidget.initialized(myHandler, theThisObj, 2000);\r\n\r\nPrioritizing connected handlers comes in handy if you want to cancel a signal so that other\r\nconnected handlers are not called. To cancel a signal a connected handler must return\r\n`signals.signal.CANCEL`.\r\n\r\n\twidget.dropped(function () {\r\n\t\t// Decide to cancel the signal.\r\n\t\treturn signals.signal.CANCEL;\r\n\t}, 2000);\r\n\r\nAs an API author you can determine if a signal has been cancelled by checking the return value of `emit()`.\r\n\r\n\tif (widget.dropped.emit()) {\r\n\t\t// dropped signal was not cancelled\r\n\t} else {\r\n\t\t// dropped signal was cancelled\r\n\t}\r\n\r\n\r\n\r\n# Locked signals\r\n\r\nAs an API author you may want to restrict you can emit your signals, that is make the signals `emit()` private\r\nwhile keeping the rest of the signal API public. You can do this by locking the signal when calling `lock()`.\r\n\r\n\tvar key = {};\r\n\twidget.init = function () {\r\n\t\twidget.dropped = signals.signal(\'widget.dropped\').lock(key);\r\n\t};\r\n\r\nThis locks the `dropped` signal so that no one can emit the signal. If it\'s attempted the `emit()` will throw an error.\r\n\r\n\t// Somewhere in code outside of the widget...\r\n\t// This will throw an error.\r\n\twidget.dropped.emit();\r\n\r\nThe API author can must unlock the signal before calling `emit()`.\r\n\r\n\t// In widget code somewhere...\r\n\twidget.dropped.unlock(key).emit();\r\n\r\nBecause the key is used to lock and unlock your signals you\'ll want to keep it privately scoped to just widget code.\r\nA convenient way of doing this is using a closure.\r\n\r\n\tfunction makeWidget(opts) {\r\n\t\tvar key = {}, widget;\r\n\r\n\t\twidget = {\r\n\t\t\tdropped: signals.signal().lock(key)\r\n\t\t};\r\n\r\n\t\t// init\r\n\t\topts.domEl.addEventListener(\'drop\', function (event) {\r\n\t\t\twidget.dropped.unlock(key).emit();\r\n\t\t});\r\n\r\n\t\treturn widget;\r\n\t}\r\n\r\n\r\n# Advanced example\r\n\r\nNow take a look at a video player component as an example. When hooking the controls for a video player\r\nit\'s common to have to write code like this.\r\n\r\n\t// Somewhere in the code that integrates the controls with the video player component.\r\n\tcontrols.addEventListener(\'volumeChange\', function (event) {\r\n\t\tvideoPlayer.volume(event.newValue);\r\n\t});\r\n\tcontrols.addEventListener(\'muteChange\', function (event) {\r\n\t\tvideoPlayer.mute(event.newValue);\r\n\t});\r\n\tcontrols.addEventListener(\'playAction\', function (event) {\r\n\t\tvideoPlayer.mute(event.newValue);\r\n\t});\r\n\r\n\t// And just in case the video player has its volume and mute state changed outside of the controls\r\n\t// we have to keep our control\'s state in sync with the video player.\r\n\tvideoPlayer.addEventListener(\'volumeChange\', function (event) {\r\n\t\tcontrols.volume(event.newValue);\r\n\t});\r\n\tvideoPlayer.addEventListener(\'muteChange\', function (event) {\r\n\t\tcontrols.mute(event.newValue);\r\n\t});\r\n\r\nUsing signals this can be written much more concisely.\r\n\r\n\tvideoPlayer.volumeChanged(controls.volume);\r\n\tvideoPlayer.muteChanged(controls.mute);\r\n\tcontrols.volumeChanged(videoPlayer.volume);\r\n\tcontrols.muteChanged(videoPlayer.mute);\r\n\tcontrols.playAction(videoPlayer.play);\r\n\r\nThe beauty of this architecture is that other components can just as easily be hooked up in a similar fashion.\r\nNow here\'s the signal code needed to pull this off.\r\n\r\n\t// Controls //\r\n\r\n\t// The signal that indicates some play control has been interacted with.\r\n\tcontrols.playAction = signals.signal(\'controls.playAction\');\r\n\r\n\t// The signal that indicates that the volume state has changed.\r\n\tcontrols.volumeChanged = signals.signal(\'controls.volume\');\r\n\r\n\t// The signal that indicates that the mute state has changed.\r\n\tcontrols.muteChanged = signals.signal(\'controls.mute\');\r\n\r\n\t// Now our volume and mute getter/setter methods.\r\n\tcontrols.volume = function (volume) {\r\n\t\tif (arguments.length === 0) {\r\n\t\t\treturn this._volume;\r\n\t\t}\r\n\r\n\t\tif (volume !== this._volume) {\r\n\t\t\tthis._volume = volume;\r\n\t\t\tthis.volumeChanged.emit(volume);\r\n\t\t}\r\n\t};\r\n\r\n\tcontrols.mute = function (mute) {\r\n\t\tif (arguments.length === 0) {\r\n\t\t\treturn this._mute;\r\n\t\t}\r\n\r\n\t\tif (mute !== this._mute) {\r\n\t\t\tthis._mute = mute;\r\n\t\t\tthis.muteChanged.emit(mute);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\t// Video Player //\r\n\r\n\t// The signal that indicates that the volume state has changed.\r\n\tvideoPlayer.volumeChanged = signals.signal(\'videoPlayer.volumeChanged\');\r\n\r\n\t// The signal that indicates that the mute state has changed.\r\n\tvideoPlayer.muteChanged = signals.signal(\'videoPlayer.muteChanged\');\r\n\r\n\tvideoPlayer.volume = function (volume) {\r\n\t\tif (arguments.length === 0) {\r\n\t\t\treturn this._volume;\r\n\t\t}\r\n\r\n\t\tif (mute !== this._mute) {\r\n\t\t\tthis._volume = volume;\r\n\t\t\tthis.volumeChanged.emit(volume);\r\n\t\t}\r\n\t};\r\n\r\n\t// Now our volume and mute getter/setter methods.\r\n\tvideoPlayer.mute = function (mute) {\r\n\t\tif (arguments.length === 0) {\r\n\t\t\treturn this._mute;\r\n\t\t}\r\n\r\n\t\tif (mute !== this._mute) {\r\n\t\t\tthis._mute = mute;\r\n\t\t\tthis.muteChanged.emit(mute);\r\n\t\t}\r\n\t};\r\n\r\n\tvideoPlayer.play = function () {\r\n\t\tif (this._state !== \'PLAYING\' {\r\n\t\t\tthis._state = \'PLAYING\';\r\n\t\t\t// this.doStuffToPlayTheVideo();\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n# API\r\n\r\nSee the `signals.d.ts` file for the complete API documentation.\r\n\r\n\r\n\r\n# Development Environment\r\n\r\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '9c600642f789d8c8aaf3fdb6c0513adb52e3e665',
17 silly publish   _id: 'signalsjs@1.0.0',
17 silly publish   _shasum: '0634cd9cc7f59e5ba79c72bf8cc2459494f220c4',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name signalsjs
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/signalsjs
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading C:\Users\Darren (Play)\AppData\Roaming\npm-cache\signalsjs\1.0.0\package.tgz
25 verbose request uri https://registry.npmjs.org/signalsjs
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 8:43:47 AM
28 verbose request using bearer token for auth
29 verbose request id bd90f8634d866aa6
30 http request PUT https://registry.npmjs.org/signalsjs
31 http 403 https://registry.npmjs.org/signalsjs
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=60',
32 verbose headers   'content-length': '101',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Fri, 06 Nov 2015 13:43:52 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-atl6234-ATL',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1446817429.917668,VS0,VE2905' }
33 verbose request invalidating C:\Users\Darren (Play)\AppData\Roaming\npm-cache\registry.npmjs.org\signalsjs on PUT
34 error publish Failed PUT 403
35 verbose stack Error: You do not have permission to publish 'signalsjs'. Are you logged in as the correct user? : signalsjs
35 verbose stack     at CachingRegistryClient.<anonymous> (c:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:247:14)
35 verbose stack     at Request._callback (c:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:170:14)
35 verbose stack     at Request.self.callback (c:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:368:22)
35 verbose stack     at Request.emit (events.js:110:17)
35 verbose stack     at Request.<anonymous> (c:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1219:14)
35 verbose stack     at Request.emit (events.js:129:20)
35 verbose stack     at IncomingMessage.<anonymous> (c:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1167:12)
35 verbose stack     at IncomingMessage.emit (events.js:129:20)
35 verbose stack     at _stream_readable.js:908:16
35 verbose stack     at process._tickCallback (node.js:355:11)
36 verbose statusCode 403
37 verbose pkgid signalsjs
38 verbose cwd c:\Users\Darren (Play)\Documents\Workspace\signalsjs
39 error Windows_NT 6.3.9600
40 error argv "c:\\Program Files\\nodejs\\node.exe" "c:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
41 error node v0.12.4
42 error npm  v2.10.1
43 error code E403
44 error You do not have permission to publish 'signalsjs'. Are you logged in as the correct user? : signalsjs
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
